// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Solitons.Data.Common.Postgres
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class LoggingPgScriptRtt : Solitons.Text.Sql.PgRuntimeTextTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("CREATE TYPE   ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(@".log_level AS ENUM ('critical', 'error', 'warning', 'info', 'verbose'); 

CREATE TABLE IF NOT EXISTS system.log
(
	day_of_year int NOT NULL CHECK(day_of_year = EXTRACT(DOY FROM created_utc)) DEFAULT(EXTRACT(DOY FROM now())),
	day_of_month int NOT NULL CHECK(day_of_month = EXTRACT(DAY FROM created_utc)) DEFAULT(EXTRACT(DAY FROM now())),
	day_of_week int NOT NULL CHECK(day_of_week = EXTRACT(DOW FROM created_utc)) DEFAULT(EXTRACT(DOW FROM now())),
	quarter_of_year int NOT NULL CHECK(quarter_of_year = EXTRACT(QUARTER FROM created_utc)) DEFAULT(EXTRACT(QUARTER FROM now())),
	month_of_year int NOT NULL CHECK(month_of_year = EXTRACT(MONTH FROM created_utc)) DEFAULT(EXTRACT(MONTH FROM now())),
	week_of_year int NOT NULL CHECK(week_of_year = EXTRACT(WEEK FROM created_utc)) DEFAULT(EXTRACT(WEEK FROM now())),
	hour int NOT NULL CHECK(hour = EXTRACT(HOUR FROM created_utc)) DEFAULT(EXTRACT(HOUR FROM now())),
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	created_utc timestamp NOT NULL DEFAULT(now()),
    level system.log_level NOT NULL DEFAULT 'error'::system.log_level,
    tags text[],
    metadata json,
    message text NOT NULL,
	details text,
");
 if(Options == LoggingPgScriptPartitioningOptions.ByYearDay){ 
            this.Write(" \r\n\tPRIMARY KEY(day_of_year, id)\r\n) PARTITION BY HASH(day_of_year); ");
 for(int i = 1; i <= 365; ++i ){ var part = (i % 365).ToString("000"); 
            this.Write(" \r\nCREATE TABLE system.log_day");
            this.Write(this.ToStringHelper.ToStringWithCulture(part));
            this.Write(" PARTITION OF system.log FOR VALUES WITH (MODULUS 365, REMAINDER ");
            this.Write(this.ToStringHelper.ToStringWithCulture(part));
            this.Write("); ");
 } } 
            this.Write(" \r\n\r\n");
 if(Options == LoggingPgScriptPartitioningOptions.ByYearQuarter){ 
            this.Write(" \r\n\tPRIMARY KEY(quarter_of_year, id)\r\n) PARTITION BY HASH(quarter_of_year); ");
 for(int i = 1; i <= 4; ++i ){ var part = (i % 4 ).ToString("0"); 
            this.Write(" \r\nCREATE TABLE system.log_quarter");
            this.Write(this.ToStringHelper.ToStringWithCulture(part));
            this.Write(" PARTITION OF system.log FOR VALUES WITH (MODULUS 4, REMAINDER ");
            this.Write(this.ToStringHelper.ToStringWithCulture(part));
            this.Write("); ");
 } } 
            this.Write("\r\nCREATE OR REPLACE FUNCTION system.log_insert(\r\n\t_level system.log_level, \r\n\t_ta" +
                    "gs text[], \r\n\t_metadata json, \r\n\t_message text, \r\n\t_details text DEFAULT(NULL),\r" +
                    "\n\t_created_utc timestamp DEFAULT(now())) RETURNS SETOF system.log \r\nAS \r\n$$\r\n\tIN" +
                    "SERT INTO system.log(\r\n\t\tday_of_year,\r\n\t\tday_of_month,\r\n\t\tday_of_week,\r\n\t\tquarte" +
                    "r_of_year,\r\n\t\tmonth_of_year,\r\n\t\tweek_of_year,\r\n\t\thour,\r\n\t\tcreated_utc,\r\n\t\tlevel," +
                    "\r\n\t\ttags,\r\n\t\tmetadata,\r\n\t\t\"message\",\r\n\t\tdetails)\r\n\tVALUES(\r\n\t\tEXTRACT(DOY FROM _" +
                    "created_utc),\r\n\t\tEXTRACT(DAY FROM _created_utc),\r\n\t\tEXTRACT(DOW FROM _created_ut" +
                    "c),\r\n\t\tEXTRACT(QUARTER FROM _created_utc),\r\n\t\tEXTRACT(MONTH FROM _created_utc),\r" +
                    "\n\t\tEXTRACT(WEEK FROM _created_utc),\r\n\t\tEXTRACT(HOUR FROM _created_utc),\r\n\t\t_crea" +
                    "ted_utc,\r\n\t\tCOALESCE(_level, \'error\'::system.log_level),\r\n\t\t_tags,\r\n\t\t_metadata," +
                    "\r\n\t\t_message,\r\n\t\t_details\t\t\r\n\t)\r\n\tRETURNING *;\r\n$$ LANGUAGE \'sql\' VOLATILE;\r\n\r\n\r" +
                    "\nCREATE VIEW system.vw_log AS \r\nSELECT \t\r\n\tid,\t\t\r\n\tlevel,\r\n\ttags,\r\n\tmetadata,\r\n\t" +
                    "message,\t\r\n\tdetails,\r\n\tcreated_utc,\r\n\tday_of_year,\r\n\tday_of_month,\r\n\tday_of_week" +
                    ",\r\n\tquarter_of_year,\r\n\tmonth_of_year,\r\n\tweek_of_year,\r\n\thour,\r\n\tto_tsvector(json" +
                    "b_build_object(\r\n\t\t\'id\', id\r\n\t\t,\'createdUtc\', created_utc\r\n\t\t,\'level\', level\r\n\t\t" +
                    ",\'tags\', tags\r\n\t\t,\'metadata\', metadata\r\n\t\t,\'message\', message\r\n\t\t,\'details\', det" +
                    "ails\r\n\t)) AS tsvector\r\nFROM system.log;\r\n\r\n\r\n\r\nCREATE MATERIALIZED VIEW system.m" +
                    "vw_log AS \r\nSELECT \r\n\tid,\t\t\r\n\tlevel,\r\n\ttags,\r\n\tmetadata,\r\n\tmessage,\t\r\n\tdetails,\r" +
                    "\n\tcreated_utc,\r\n\tday_of_year,\r\n\tday_of_month,\r\n\tday_of_week,\r\n\tquarter_of_year,\r" +
                    "\n\tmonth_of_year,\r\n\tweek_of_year,\r\n\thour,\r\n\ttsvector\r\nFROM system.vw_log\r\nORDER B" +
                    "Y created_utc DESC;\r\n\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_id ON system.mvw_lo" +
                    "g(id);\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_level ON system.mvw_log(level);\r\nC" +
                    "REATE INDEX IF NOT EXISTS ix_mvw_log_created_utc ON system.mvw_log(created_utc);" +
                    "\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_message ON system.mvw_log USING gist (me" +
                    "ssage gist_trgm_ops);\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_details ON system.m" +
                    "vw_log USING gist (details gist_trgm_ops);\r\n\r\nCREATE INDEX IF NOT EXISTS ix_mvw_" +
                    "log_day_of_year ON system.mvw_log(day_of_year);\r\nCREATE INDEX IF NOT EXISTS ix_m" +
                    "vw_log_quarter_of_year ON system.mvw_log(quarter_of_year);\r\nCREATE INDEX IF NOT " +
                    "EXISTS ix_mvw_log_month_of_year ON system.mvw_log(month_of_year);\r\nCREATE INDEX " +
                    "IF NOT EXISTS ix_mvw_log_day_of_month ON system.mvw_log(day_of_month);\r\nCREATE I" +
                    "NDEX IF NOT EXISTS ix_mvw_log_day_of_week ON system.mvw_log(day_of_week);\r\nCREAT" +
                    "E INDEX IF NOT EXISTS ix_mvw_log_hour ON system.mvw_log(hour);\r\n\r\nCREATE INDEX i" +
                    "x_mvw_log_json ON system.mvw_log USING gist (tsvector);");
            return this.GenerationEnvironment.ToString();
        }
    }
}
