// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Solitons.Data.Common.Postgres
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class SolitonsPgScriptRtt : Solitons.Text.Sql.PgRuntimeTextTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\nCREATE DOMAIN ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(".natural_key AS varchar(150) CHECK(VALUE ~ \'^\\S.*\\S$\');\r\nCREATE DOMAIN ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(".version AS varchar(25) CHECK (value ~ \'^\\d+(\\.\\d+){0,3}$\');\r\nCREATE DOMAIN ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(".email AS varchar(150) CHECK ( value ~ \'");
            this.Write(this.ToStringHelper.ToStringWithCulture(EmailPattern));
            this.Write("\');\r\nCREATE TYPE   ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(".log_level AS ENUM (\'critical\', \'error\', \'warning\', \'info\', \'verbose\'); \r\n\r\nCREAT" +
                    "E OR REPLACE FUNCTION ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(@".raise_exception_if_null(arg anyelement, arg_name varchar(50)) RETURNS void AS
$$
BEGIN
	IF arg IS NULL THEN
		RAISE EXCEPTION '''%'' argument is required', COALESCE(arg_name, '?');
	END IF;
END;
$$ LANGUAGE 'plpgsql' IMMUTABLE;



CREATE OR REPLACE FUNCTION ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(@".raise_exception_if_null_or_empty(arg uuid, arg_name varchar(50)) RETURNS void AS
$$
BEGIN
	IF NULLIF(arg, '00000000-0000-0000-0000-000000000000'::uuid) IS NULL THEN
		RAISE EXCEPTION '''%'' argument is required', COALESCE(arg_name, '?');
	END IF;
END;
$$ LANGUAGE 'plpgsql' IMMUTABLE;



CREATE OR REPLACE FUNCTION ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(@".raise_exception_if_null_or_empty(arg text, arg_name varchar(50)) RETURNS void AS
$$
BEGIN
	IF NULLIF(TRIM(txt), '') THEN
		RAISE EXCEPTION '''%'' argument is required', COALESCE(arg_name, '?');
	END IF;
END;
$$ LANGUAGE 'plpgsql' IMMUTABLE;



CREATE OR REPLACE FUNCTION ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(@".try_cast(_in text, INOUT _out ANYELEMENT) AS
$$
BEGIN
   EXECUTE FORMAT('SELECT %L::%s', $1, pg_typeof(_out)) INTO  _out;
EXCEPTION WHEN others THEN
   -- do nothing: _out already carries default
END;
$$ LANGUAGE 'plpgsql' IMMUTABLE;


CREATE TABLE IF NOT EXISTS system.log
(
	day_of_year int NOT NULL CHECK(day_of_year = EXTRACT(DOY FROM created_utc)) DEFAULT(EXTRACT(DOY FROM now())),
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	created_utc timestamp NOT NULL DEFAULT(now()),
    level system.log_level NOT NULL DEFAULT 'error'::system.log_level,
    tags text[],
    metadata json,
    message text NOT NULL,
	details text,
	PRIMARY KEY(day_of_year, id)
) PARTITION BY HASH(day_of_year); ");
 for(int i = 1; i <= 365; ++i ){ var part = (i % 365).ToString("000"); 
            this.Write("CREATE TABLE system.log_");
            this.Write(this.ToStringHelper.ToStringWithCulture(part));
            this.Write(" PARTITION OF system.log FOR VALUES WITH (MODULUS 365, REMAINDER ");
            this.Write(this.ToStringHelper.ToStringWithCulture(part));
            this.Write("); ");
 } 
            this.Write(" \r\n\r\nCREATE OR REPLACE FUNCTION system.log_insert(\r\n\t_level system.log_level, \r\n\t" +
                    "_tags text[], \r\n\t_metadata json, \r\n\t_message text, \r\n\t_details text DEFAULT(NULL" +
                    "),\r\n\t_created_utc timestamp DEFAULT(now())) RETURNS SETOF system.log \r\nAS \r\n$$\r\n" +
                    "\tINSERT INTO system.log(\r\n\t\tday_of_year, \r\n\t\tcreated_utc,\r\n\t\tlevel,\r\n\t\ttags,\r\n\t\t" +
                    "metadata,\r\n\t\t\"message\",\r\n\t\tdetails)\r\n\tVALUES(\r\n\t\tEXTRACT(DOY FROM _created_utc)," +
                    "\r\n\t\t_created_utc,\r\n\t\tCOALESCE(_level, \'error\'::system.log_level),\r\n\t\t_tags,\r\n\t\t_" +
                    "metadata,\r\n\t\t_message,\r\n\t\t_details\t\t\r\n\t)\r\n\tRETURNING *;\r\n$$ LANGUAGE \'sql\' VOLAT" +
                    "ILE;\r\n\r\n\r\nCREATE VIEW system.vw_log AS \r\nSELECT \r\n\tday_of_year,\r\n\tid,\t\r\n\tEXTRACT" +
                    "(YEAR FROM created_utc) AS year,\r\n\tEXTRACT(QUARTER FROM created_utc) AS quarter," +
                    "\r\n\tEXTRACT(MONTH FROM created_utc) AS month,\r\n\tEXTRACT(DAY FROM created_utc) AS " +
                    "day,\r\n\tEXTRACT(DOW FROM created_utc) AS day_of_week,\r\n\tEXTRACT(HOUR FROM created" +
                    "_utc) AS hour,\r\n\tlevel,\r\n\ttags,\r\n\tmetadata,\r\n\tmessage,\t\r\n\tdetails,\r\n\tcreated_utc" +
                    ",\r\n\tto_tsvector(jsonb_build_object(\r\n\t\t\'id\', id\r\n\t\t,\'createdUtc\', created_utc\r\n\t" +
                    "\t,\'level\', level\r\n\t\t,\'tags\', tags\r\n\t\t,\'metadata\', metadata\r\n\t\t,\'message\', messag" +
                    "e\r\n\t\t,\'details\', details\r\n\t)) AS tsvector\r\nFROM system.log;\r\n\r\n\r\n\r\nCREATE MATERI" +
                    "ALIZED VIEW system.mvw_log AS \r\nSELECT \r\n\tday_of_year,\r\n\tid,\r\n\tyear,\r\n\tquarter,\r" +
                    "\n\tmonth,\r\n\tday,\r\n\tday_of_week,\r\n\thour,\r\n\tlevel,\r\n\ttags,\r\n\tmetadata,\r\n\tmessage,\t\r" +
                    "\n\tdetails,\r\n\tcreated_utc,\r\n\ttsvector\r\nFROM system.vw_log\r\nORDER BY created_utc D" +
                    "ESC;\r\n\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_id ON system.mvw_log(id);\r\nCREATE " +
                    "INDEX IF NOT EXISTS ix_mvw_log_level ON system.mvw_log(level);\r\nCREATE INDEX IF " +
                    "NOT EXISTS ix_mvw_log_created_utc ON system.mvw_log(created_utc);\r\nCREATE INDEX " +
                    "IF NOT EXISTS ix_mvw_log_message ON system.mvw_log USING gist (message gist_trgm" +
                    "_ops);\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_details ON system.mvw_log USING gi" +
                    "st (details gist_trgm_ops);\r\n\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_year ON sys" +
                    "tem.mvw_log(year);\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_quarter ON system.mvw_" +
                    "log(quarter);\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_month ON system.mvw_log(mon" +
                    "th);\r\nCREATE INDEX IF NOT EXISTS ix_mvw_log_day ON system.mvw_log(day);\r\nCREATE " +
                    "INDEX IF NOT EXISTS ix_mvw_log_day_of_week ON system.mvw_log(day_of_week);\r\nCREA" +
                    "TE INDEX IF NOT EXISTS ix_mvw_log_hour ON system.mvw_log(hour);\r\n\r\nCREATE INDEX " +
                    "ix_mvw_log_json ON system.mvw_log USING gist (tsvector);");
            return this.GenerationEnvironment.ToString();
        }
    }
}
