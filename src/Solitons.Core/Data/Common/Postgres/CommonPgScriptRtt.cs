// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Solitons.Data.Common.Postgres
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class CommonPgScriptRtt : Solitons.Text.Sql.PgRuntimeTextTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\nCREATE DOMAIN ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(".natural_key AS varchar(150) CHECK(VALUE ~ \'^\\S.*\\S$\');\r\nCREATE DOMAIN ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(".version AS varchar(25) CHECK (value ~ \'^\\d+(\\.\\d+){0,3}$\');\r\nCREATE DOMAIN ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(".email AS varchar(150) CHECK ( value ~ \'");
            this.Write(this.ToStringHelper.ToStringWithCulture(EmailPattern));
            this.Write("\');\r\n\r\nCREATE OR REPLACE FUNCTION ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(@".raise_exception_if_null_argument(arg anyelement, arg_name varchar(50)) RETURNS void AS
$$
BEGIN
	IF arg IS NULL THEN
		RAISE EXCEPTION '''%'' argument is required', COALESCE(arg_name, '?');
	END IF;
END;
$$ LANGUAGE 'plpgsql' IMMUTABLE;



CREATE OR REPLACE FUNCTION ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(@".raise_exception_if_null_or_empty_argument(arg uuid, arg_name varchar(50)) RETURNS void AS
$$
BEGIN
	IF NULLIF(arg, '00000000-0000-0000-0000-000000000000'::uuid) IS NULL THEN
		RAISE EXCEPTION '''%'' argument is required', COALESCE(arg_name, '?');
	END IF;
END;
$$ LANGUAGE 'plpgsql' IMMUTABLE;



CREATE OR REPLACE FUNCTION ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(@".raise_exception_if_null_or_empty_argument(arg text, arg_name varchar(50)) RETURNS void AS
$$
BEGIN
	IF NULLIF(TRIM(txt), '') THEN
		RAISE EXCEPTION '''%'' argument is required', COALESCE(arg_name, '?');
	END IF;
END;
$$ LANGUAGE 'plpgsql' IMMUTABLE;



CREATE OR REPLACE FUNCTION ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SchemaName));
            this.Write(".try_cast(_in text, INOUT _out ANYELEMENT) AS\r\n$$\r\nBEGIN\r\n   EXECUTE FORMAT(\'SELE" +
                    "CT %L::%s\', $1, pg_typeof(_out)) INTO  _out;\r\nEXCEPTION WHEN others THEN\r\n   -- " +
                    "do nothing: _out already carries default\r\nEND;\r\n$$ LANGUAGE \'plpgsql\' IMMUTABLE;" +
                    "\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
