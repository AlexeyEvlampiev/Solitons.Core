<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#
	var options = new Option[]{
		new Option("Superuser","Determine whether the new role is a 'superuser'"),
		new Option("CreateDb","Defines a role's ability to create databases. If CREATEDB is specified, the role being defined will be allowed to create new databases."),
		new Option("CreateRole","Determine whether a role will be permitted to create new roles (that is, execute CREATE ROLE). A role with CREATEROLE privilege can also alter and drop other roles."),
		new Option("Inherit","Determine whether a role “inherits” the privileges of roles it is a member of. A role with the INHERIT attribute can automatically use whatever database privileges have been granted to all roles it is directly or indirectly a member of."),
		new Option("Login","Determine whether a role is allowed to log in; that is, whether the role can be given as the initial session authorization name during client connection. A role having the LOGIN attribute can be thought of as a user. Roles without this attribute are useful for managing database privileges, but are not users in the usual sense of the word")
	};
#>
namespace Solitons.Security.Postgres
{
	using System;

	/// <summary>
    /// CREATE ROLE options
    /// </summary>
	[Flags]
    public enum CreateRoleOptions
    {
		/// <summary>
        /// 
        /// </summary>
        None = 0<# for(int i = 0; i < options.Length; ++i){ var option = options[i]; #>, 

		/// <summary>
        /// <#= option.Summary #>
        /// </summary>
		<#= option.Name #> = <#= Math.Pow(2, i+1) #><# } #>

    }
}
<#+
class Option
{
	public Option(string name, string summary)
	{
		Name = name;
		Summary = summary;
	}
	public string Summary{ get; }
	public string Name{ get; }
}
#>