<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #><# 
    var commands = new Command[]{
        Command.Create("Upgrade")
                .Option("ConnectionString", "--connection", "Target database connection string", CommandOptionType.SingleValue)
                .Option("Recreate", "--recreate|-rc", "Drop and recreate all the database objects", CommandOptionType.NoValue)
                .Option("Superuser", "--superuser|-su", "Superuser settings string", CommandOptionType.MultipleValue)
                .Option("Stubs", "--with-stubs|-stubs", "Include stabs", CommandOptionType.NoValue),
        Command.Create("Provision")
            .Option("Host", "--host|-h", "Server name", CommandOptionType.SingleValue)
            .Option("Username", "--username|-u", "User name", CommandOptionType.SingleValue)
            .Option("Password", "--password|-p", "Password", CommandOptionType.SingleValue)
            .Option("Database", "--dbname|-db", "Name of the database to be created", CommandOptionType.SingleValue)
            .Option("DatabaseAdminPassword", "--admin-password|-dap", "Database admin- password", CommandOptionType.SingleValue),
        Command.Create("Deprovision")
            .Option("Host", "--host|-h", "Server name", CommandOptionType.SingleValue)
            .Option("Username", "--username|-u", "User name", CommandOptionType.SingleValue)
            .Option("Password", "--password|-p", "Password", CommandOptionType.SingleValue)
            .Option("Database", "--dbname|-db", "Name of the database to be created", CommandOptionType.SingleValue)
    };
#>
namespace Sample.DbUp
{
    using McMaster.Extensions.CommandLineUtils;<# foreach(var cmd in commands){ #>     
    
    /// <summary>
    /// 
    /// </summary>
    public sealed class <#= cmd.Name #>Options
    {
        public <#= cmd.Name #>Options(CommandLineApplication command)
        {<# foreach(var option in cmd.Options){ #>  
            this.<#= option.Name #> = command.Option("<#= option.Template #>", "<#= option.Description #>", CommandOptionType.<#= option.OptionType #>);<# } #> 
        }

        <# foreach(var option in cmd.Options){ #>  
        /// <summary>
        /// <#= option.Description #>. <#= option.Template #>
        /// </summary>
        public CommandOption <#= option.Name #> { get; private set;} <# } #> 

    }<# } #> 

}
<#+ 

class Command
{
    public Command(string name)
    {
        Name = name;
    } 

    public static Command Create(string name) { return new Command(name);}

    public string Name { get; set; }
    public readonly List<Option> Options = new List<Option>();

    public Command Option(string name, string template, string description, CommandOptionType optionType)
    {
        Options.Add(new Option(name, template, description, optionType));
        return this;
    }
}

class Option
{
	public Option(string name, string template, string description, CommandOptionType optionType)
	{
        Name = name;
        Template = template;
        Description = description;
        OptionType = optionType;
	}

    public string Name{ get; }
    public string Template{ get; }
    public string Description{ get; }
    public CommandOptionType OptionType{ get; }	
}

public enum CommandOptionType
{
    /// <summary>
    /// The option can be specified multiple times.
    /// <para>
    /// Example input: <c>--letter A --letter B --letter C</c>
    /// </para>
    /// </summary>
    MultipleValue,

    /// <summary>
    /// The option can only be specified once.
    /// <para>
    /// Example input: <c>--letter A</c>
    /// </para>
    /// <para>
    /// Example input: <c>--letter=A</c>
    /// </para>
    /// <para>
    /// Example input: <c>--letter:A</c>
    /// </para>
    /// </summary>
    SingleValue,

    /// <summary>
    /// The option can only be specified once, and may or may not have a value.
    /// <para>
    /// To disambiguate this from <see cref="NoValue"/>, values provided cannot be space-separated from the option name,
    /// but must use '=' or ':'
    /// </para>
    /// <para>
    /// Example input: <c>--log</c>
    /// </para>
    /// <para>
    /// Example input: <c>--log:verbose</c>
    /// </para>
    /// </summary>
    SingleOrNoValue,

    /// <summary>
    /// The option can only be specified once, and does not have a value.
    /// <para>
    /// Example input: <c>--no-commit</c>
    /// </para>
    /// </summary>
    NoValue
}
#>